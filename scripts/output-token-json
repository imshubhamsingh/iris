#!/usr/bin/env node

let fs = require('fs');
let util = require('util');
let path = require('path');
const { parseToHsl } = require('polished');

const root = path.join(__dirname, '..');

let { core } = require(root + '/build/tokens/');

const fileWrite = util.promisify(fs.writeFile);

const themes = ['light', 'dark'];

async function run() {
  const tokenSets = Object.entries(core.color);

  const tokensArray = themes
    .flatMap((theme) => tokenSets.map(tokenSetProcess(theme)))
    .filter((token) => !!token);

  const tokens = { iris: Object.assign({}, ...tokensArray) };

  try {
    await fileWrite(
      path.join(root, 'tokens.json'),
      JSON.stringify(tokens, null, 2)
    );
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}

function tokenValue(token, theme) {
  const hex = token({ theme });

  const { hue, saturation, lightness } = parseToHsl(hex);
  const h = Math.round(hue * 10) / 10;
  const s = Math.round(saturation * 1000) / 10;
  const l = Math.round(lightness * 1000) / 10;

  const value = `hsl(${h}, ${s}%, ${l}%)`;
  const type = 'color';

  return { value, type };
}

function tokenSetProcess(theme) {
  return ([key, set]) => {
    function tokenExtract(alias) {
      const value = tokenValue(set[alias], theme);
      const tokenKey = `${key}-${alias}--${theme}`;

      return { [tokenKey]: value };
    }

    const tokenSet = Object.keys(set);
    const tokenSetArray = tokenSet.map(tokenExtract);

    if (typeof set === 'function') {
      if (typeof set(500) === 'function') {
        // If the set is a TokenBand, iterate 0 - 1000.

        [...new Array(11)].map((_, i) => {
          const grade = i * 100;
          const value = tokenValue(set(grade), theme);
          const tokenKey = `${key}-${grade}--${theme}`;

          tokenSetArray.push({ [tokenKey]: value });
        });
      } else {
        // If the set is a static token return the value.

        const value = tokenValue(set, theme);
        const tokenKey = `${key}--${theme}`;
        tokenSetArray.push({ [tokenKey]: value });
      }
    }

    const tokens = Object.assign({}, ...tokenSetArray);

    return tokens;
  };
}

run();
