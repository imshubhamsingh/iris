#!/usr/bin/env node

let fs = require('fs');
let util = require('util');
let path = require('path');
const { rgb, parseToRgb } = require('polished');

const root = path.join(__dirname, '..');

let { core } = require(root + '/build/tokens/');

const fileWrite = util.promisify(fs.writeFile);

const themes = ['light', 'dark'];

async function run() {
  const tokenSets = Object.entries(core.color);

  const tokensArray = themes
    .flatMap((theme) => tokenSets.map(tokenSetProcess(theme)))
    .filter((token) => !!token);

  const tokens = { iris: Object.assign({}, ...tokensArray) };

  try {
    await fileWrite(
      path.join(root, '/src/tokens/tokens-test.json'),
      JSON.stringify(tokens, null, 2)
    );
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}

const tokenValid = (alias) =>
  alias === 'primary' ||
  alias === 'secondary' ||
  alias === 'tertiary';

function tokenValue(alias, set, theme) {
  const hex = set[alias]({ theme });

  const { red, blue, green } = parseToRgb(hex);
  const value = `rgb(${red},${blue},${green})`;
  const type = 'color';

  return { value, type };
}

function tokenSetProcess(theme) {
  return ([key, set]) => {
    if (
      set?.name === 'surface' ||
      set?.name === 'background' ||
      set?.name === 'text'
    ) {
      if (set?.primary) {
        function tokenExtract(alias) {
          if (tokenValid(alias)) {
            const value = tokenValue(alias, set, theme);
            const tokenKey = `${key}-${alias}--${theme}`;

            return { [tokenKey]: value };
          }
        }

        const tokenSet = Object.keys(set);
        const tokenSetArray = tokenSet.map(tokenExtract);

        const tokens = Object.assign({}, ...tokenSetArray);

        return tokens;
      }
    }
  };
}

run();
